	// Model obj1("./NeonEngine/src/res/models/Plasmacannon/plasma_cannon.obj", program);
	// obj1.SetTexture("./NeonEngine/src/res/models/Plasmacannon/plasmacannon_weapon_diffuse.bmp");

	// Model obj1("./NeonEngine/src/res/models/cube_5unit_allfaceuvs.obj", program);
	// obj1.SetTexture("./NeonEngine/src/res/textures/cartoon_wall_texture.jpg");

	// Model obj1("./NeonEngine/src/res/models/cube_no_normals.obj", program);
	// obj1.SetTexture("./NeonEngine/src/res/textures/cartoon_wall_texture.jpg");

	// Model obj1("./NeonEngine/src/res/models/only_quad_sphere.obj", program);
	// obj1.SetColor(glm::vec4(1.0f, 0, 0, 1.0f));
	// Model obj1("./NeonEngine/src/res/models/pepsi/Pepsi_Can.obj", program);
	// obj1.SetTexture("./NeonEngine/src/res/models/pepsi/pepsi_simple.jpg");
	// Model obj1("./NeonEngine/src/res/models/pokeball.obj", program);
	// obj1.SetTexture("./NeonEngine/src/res/textures/checkered_colored.jpg");


	// for(int i=0; i < CUBE_COUNT; ++i) {
	// 	models.push_back(new Model("./NeonEngine/src/res/models/cube_5unit_allfaceuvs.obj", program));
	// 	rand_color_r = ((float)rand() / (RAND_MAX)) + 1;
	// 	rand_color_g = ((float)rand() / (RAND_MAX)) + 1;
	// 	rand_color_b = ((float)rand() / (RAND_MAX)) + 1;
	// 	models[i]->SetColor(glm::vec4(rand_color_r-1.0f, rand_color_g-1.0f, rand_color_b-1.0f, 1.0f));
	// 	models[i]->SetTexture("./NeonEngine/src/res/textures/checker.png");
	// }
	
	// Model bench("./NeonEngine/src/res/models/bench/bench.obj", program);
	// bench.SetTexture("./NeonEngine/src/res/models/bench/animal-texture_082.jpg");

	// Model ah_25b("./NeonEngine/src/res/models/ah-24b/AN-24PB.obj", program);
	// ah_25b.SetTexture("./NeonEngine/src/res/models/ah-24b/body.jpg");

	// Model AKM("./NeonEngine/src/res/models/AKM/AKM.obj", program);
	// AKM.SetTexture("./NeonEngine/src/res/models/AKM/AKMS_Diff.tga");
		// rotation = model * glm::rotate((float)angle, glm::vec3(0, 1, 0));
		// obj1.SetModelMatrix(rotation);
		// obj1.Draw();
		// rotation = model * glm::rotate((float)angle, glm::vec3(0, 1, 0));
		// glm::mat4 bench_model_matrix = model * rotation * glm::scale(glm::vec3(0.01f, 0.01f, 0.01f));
		// bench.SetModelMatrix(bench_model_matrix);
		// bench.Draw();

		//
		// Draw the r8_ah_25b
		//
		// rotation = model * glm::rotate((float)angle, glm::vec3(0, 1, 0));
		// glm::mat4 ah_25b_model_matrix = model * rotation * glm::scale(glm::vec3(1.5f, 1.51f, 1.51f));
		// ah_25b.SetModelMatrix(ah_25b_model_matrix);
		// ah_25b.Draw();

		// Draw the AKM
		// rotation = model * glm::rotate((-1)*(float)angle, glm::vec3(0, 1, 0));
		// glm::mat4 akm_model_matrix = model * rotation * glm::scale(glm::vec3(0.2f, 0.2f, 0.2f));
		// AKM.SetModelMatrix(akm_model_matrix);
		// AKM.Draw();