# Class Descructors for buffer classes
	indexBuffers, vertexBuffers --> void glDeleteBuffers(GLsizei n, const GLuint *buffers)
	vertexArrays --> void glDeleteVertexArrays(GLsizei n, const GLuint *arrays)

	A point was raised in a Sparky Engine - Ultra Fast Batch Renderer comment that stated...

	"I think it's a bad idea to put any  "gldelete..." inside classes destructors...
	because you could easily encounter a case where you create a temporary object,put it in a data structure,then let it get deleted because the program reached the end of scope of your method...

	Since opengl is a state machine,and doesn't take care of instanced variables,it will call the "gldeletewhatever()" and you are going to find yourself with a weird behaviour,having correct meshes in data structures but that are not drawing on screen because opengl deleted their data on the gpu...

	what I do prefer,is using the destructor to free the ram heap memory,and create a  function that will delete every opengl related data structures like textures,shaders and vertex arrays,then call it when I need to free the vramï»¿"